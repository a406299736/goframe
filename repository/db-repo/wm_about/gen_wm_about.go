///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package wm_about

import (
	"fmt"
	"time"

	"gitlab.weimiaocaishang.com/weimiao/go-basic/app/pkg/code"
	e "gitlab.weimiaocaishang.com/weimiao/go-basic/pkg/errors"
	"gitlab.weimiaocaishang.com/weimiao/go-basic/repository/db-repo"

	"gorm.io/gorm"
)

func NewModel() *WmAbout {
	return new(WmAbout)
}

func NewQueryBuilder() *wmAboutQueryBuilder {
	return new(wmAboutQueryBuilder)
}

func (t *WmAbout) Create(db *gorm.DB) (id int32, er e.Er) {
	if err := db.Create(t).Error; err != nil {
		return 0, e.NewErr(code.MySQLExecError, err.Error())
	}
	return t.Id, nil
}

type wmAboutQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *wmAboutQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *wmAboutQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (er e.Er) {
	db = db.Model(&WmAbout{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err := db.Updates(m).Error; err != nil {
		return e.NewErr(code.MySQLExecError, err.Error())
	}
	return nil
}

func (qb *wmAboutQueryBuilder) Delete(db *gorm.DB) (er e.Er) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err := db.Delete(&WmAbout{}).Error; err != nil {
		return e.NewErr(code.MySQLExecError, err.Error())
	}
	return nil
}

func (qb *wmAboutQueryBuilder) Count(db *gorm.DB) (int64, e.Er) {
	var c int64
	res := qb.buildQuery(db).Model(&WmAbout{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		return 0, e.NewErr(code.MySQLExecError, res.Error.Error())
	}
	return c, nil
}

func (qb *wmAboutQueryBuilder) First(db *gorm.DB) (*WmAbout, e.Er) {
	ret := &WmAbout{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		return nil, e.NewErr(code.MySQLExecError, res.Error.Error())
	}
	return ret, nil
}

func (qb *wmAboutQueryBuilder) QueryOne(db *gorm.DB) (*WmAbout, e.Er) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *wmAboutQueryBuilder) QueryAll(db *gorm.DB) ([]*WmAbout, e.Er) {
	var ret []*WmAbout
	err := qb.buildQuery(db).Find(&ret).Error
	if err != nil {
		return nil, e.NewErr(code.MySQLExecError, err.Error())
	}
	return ret, nil
}

func (qb *wmAboutQueryBuilder) Limit(limit int) *wmAboutQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *wmAboutQueryBuilder) Offset(offset int) *wmAboutQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *wmAboutQueryBuilder) WhereId(p db_repo.Predicate, value int32) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) WhereIdIn(value []int32) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) WhereIdNotIn(value []int32) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) OrderById(asc bool) *wmAboutQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *wmAboutQueryBuilder) WhereAspirations(p db_repo.Predicate, value string) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "aspirations", p),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) WhereAspirationsIn(value []string) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "aspirations", "IN"),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) WhereAspirationsNotIn(value []string) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "aspirations", "NOT IN"),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) OrderByAspirations(asc bool) *wmAboutQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "aspirations "+order)
	return qb
}

func (qb *wmAboutQueryBuilder) WhereMap(p db_repo.Predicate, value string) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "map", p),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) WhereMapIn(value []string) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "map", "IN"),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) WhereMapNotIn(value []string) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "map", "NOT IN"),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) OrderByMap(asc bool) *wmAboutQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "map "+order)
	return qb
}

func (qb *wmAboutQueryBuilder) WhereCall(p db_repo.Predicate, value string) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "call", p),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) WhereCallIn(value []string) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "call", "IN"),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) WhereCallNotIn(value []string) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "call", "NOT IN"),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) OrderByCall(asc bool) *wmAboutQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "call "+order)
	return qb
}

func (qb *wmAboutQueryBuilder) WhereRecruit(p db_repo.Predicate, value string) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "recruit", p),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) WhereRecruitIn(value []string) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "recruit", "IN"),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) WhereRecruitNotIn(value []string) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "recruit", "NOT IN"),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) OrderByRecruit(asc bool) *wmAboutQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "recruit "+order)
	return qb
}

func (qb *wmAboutQueryBuilder) WhereUpdated(p db_repo.Predicate, value time.Time) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated", p),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) WhereUpdatedIn(value []time.Time) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated", "IN"),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) WhereUpdatedNotIn(value []time.Time) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated", "NOT IN"),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) OrderByUpdated(asc bool) *wmAboutQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated "+order)
	return qb
}

func (qb *wmAboutQueryBuilder) WhereCreated(p db_repo.Predicate, value time.Time) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created", p),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) WhereCreatedIn(value []time.Time) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created", "IN"),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) WhereCreatedNotIn(value []time.Time) *wmAboutQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created", "NOT IN"),
		value,
	})
	return qb
}

func (qb *wmAboutQueryBuilder) OrderByCreated(asc bool) *wmAboutQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created "+order)
	return qb
}
